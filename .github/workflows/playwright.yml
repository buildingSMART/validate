name: Playwright Tests
on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  playwright:
    name: 'Playwright Tests'
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-noble
    env:
      DJANGO_DB: postgresql
      POSTGRES_DB: postgres
      POSTGRES_HOST: postgres
      POSTGRES_NAME: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432
      MEDIA_ROOT: /tmp/files_storage
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: django-db
      CELERY_TASK_ALWAYS_EAGER: "false"
      CELERY_TASK_EAGER_PROPAGATES: "false"
      DJANGO_ALLOWED_HOSTS: "localhost 127.0.0.1"
      DJANGO_TRUSTED_ORIGINS: "http://localhost:3000 http://127.0.0.1:3000 http://localhost:8000 http://127.0.0.1:8000"
      POSTGRES_USER: postgres
      VIRTUAL_ENV: backend/.dev/venv
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    services:
      postgres:
        image: postgres:16.8-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --network-alias postgres
        ports:
          - 5432:5432
      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
        volumes:
          - redis_data:/data

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Prepare MEDIA_ROOT
        run: |
          mkdir -p /tmp/files_storage
          chmod -R 777 /tmp/files_storage

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y make wget unzip libpq-dev
          
      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: backend/.dev/venv
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-backend-
        
      - name: Install backend dependencies
        run: |
          cd backend
          test -d .dev/venv || python3.11 -m venv .dev/venv
          .dev/venv/bin/pip install --upgrade pip
          find . -name 'requirements.txt' -exec .dev/venv/bin/pip install -r {} \;
      - name: Download and install ifcopenshell
        run: |
          wget -O /tmp/ifcopenshell_python.zip "https://s3.amazonaws.com/ifcopenshell-builds/ifcopenshell-python-311-v0.8.4-6924012-linux64.zip"
          mkdir -p .dev/venv/lib/python3.11/site-packages
          unzip -o -d .dev/venv/lib/python3.11/site-packages /tmp/ifcopenshell_python.zip
          rm /tmp/ifcopenshell_python.zip
          # Verify installation
          ls -la .dev/venv/lib/python3.11/site-packages/
          echo "Checking for ifcopenshell installation:"
          find .dev/venv/lib/python3.11/site-packages -name "*ifcopenshell*" || echo "No ifcopenshell files found"
        working-directory: ./backend

      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
        
      - name: Install frontend dependencies (required for webServer)
        run: npm install
        working-directory: ./frontend

      - name: Cache e2e dependencies
        uses: actions/cache@v4
        with:
          path: e2e/node_modules
          key: ${{ runner.os }}-e2e-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-e2e-
        
      - name: Install e2e dependencies (replicating make e2e-test)
        run: npm install
        working-directory: ./e2e

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
        
      - name: Install Playwright browsers
        run: npm run install-playwright
        working-directory: ./e2e

      - name: Setup Django database, migrations, and superusers
        run: |
          cd backend
          .dev/venv/bin/python manage.py makemigrations
          .dev/venv/bin/python manage.py migrate
          .dev/venv/bin/python manage.py collectstatic --noinput
          DJANGO_SUPERUSER_USERNAME=root DJANGO_SUPERUSER_PASSWORD=root DJANGO_SUPERUSER_EMAIL=root@localhost .dev/venv/bin/python manage.py createsuperuser --noinput
          DJANGO_SUPERUSER_USERNAME=SYSTEM DJANGO_SUPERUSER_PASSWORD=system DJANGO_SUPERUSER_EMAIL=system@localhost .dev/venv/bin/python manage.py createsuperuser --noinput
        env:
          DJANGO_DB: postgresql
          POSTGRES_HOST: postgres
          POSTGRES_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          VIRTUAL_ENV: backend/.dev/venv

      # - name: Seed 30 ValidationRequests (for pagination)
      #   run: |
      #     cd backend
      #     .dev/venv/bin/python manage.py shell <<'PY'
      #     from django.contrib.auth import get_user_model
      #     from django.core.files.base import ContentFile
      #     from apps.ifc_validation_models.models import ValidationRequest

      #     User = get_user_model()
      #     user = User.objects.get(username="root")

      #     # create 30 tiny *.ifc files
      #     for i in range(30):
      #         f = ContentFile(b"IFC", name=f"seed_{i}.ifc")
      #         ValidationRequest.objects.create(
      #             created_by=user,
      #             file=f,
      #             file_name=f.name,
      #             size=len(b"IFC"),
      #             channel="API",
      #         )
      #     print("Seeded 30 ValidationRequests")
      #     PY

      - name: Run Playwright tests
        run: npm run test
        working-directory: ./e2e
        env:
          DJANGO_DB: postgresql
          POSTGRES_HOST: postgres
          POSTGRES_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e/test-results/
          retention-days: 7