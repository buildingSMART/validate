name: Playwright Tests

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build & test'
        required: true
        default: 'development'
        type: choice
        options: [development]

jobs:
  e2e:
    name: Playwright E2E
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16.8-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DJANGO_DB: postgresql
      POSTGRES_HOST: localhost
      POSTGRES_NAME: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432

      DEBUG: 'True'
      ENV: DEV

      DJANGO_TRUSTED_ORIGINS: http://localhost:8000 http://127.0.0.1:8000 http://localhost:3000
      DJANGO_ALLOWED_HOSTS: localhost 127.0.0.1

      MEDIA_ROOT: ${{ runner.temp }}/files_storage

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Setup Node.js (cache)
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            e2e/package-lock.json

      - name: Setup Python (cache)
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Create venv + install backend deps
        run: |
          cd backend
          python3.13 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install frontend deps
        run: |
          cd frontend
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Prepare writable MEDIA_ROOT
        run: mkdir -p "$MEDIA_ROOT"

      - name: Init DB (migrate & test users)
        run: |
          cd backend
          source venv/bin/activate
          PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -U $POSTGRES_USER --dbname $POSTGRES_NAME -c "DROP SCHEMA public CASCADE; CREATE SCHEMA public;"
          python3 manage.py makemigrations
          python3 manage.py migrate
          DJANGO_SUPERUSER_USERNAME=root DJANGO_SUPERUSER_PASSWORD=root DJANGO_SUPERUSER_EMAIL=root@localhost python3 manage.py createsuperuser --noinput
          DJANGO_SUPERUSER_USERNAME=SYSTEM DJANGO_SUPERUSER_PASSWORD=system DJANGO_SUPERUSER_EMAIL=system@localhost python3 manage.py createsuperuser --noinput

      - name: Install Playwright & browser
        run: |
          cd e2e
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npx playwright install chromium --with-deps

      - name: Run Playwright (max workers)
        run: |
          cd e2e
          # Use all available cores; overrides workers=1 in your CI config
          npx playwright test --reporter=line --workers=$(nproc)
