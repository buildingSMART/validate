name: Playwright Tests
on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

jobs:
  playwright:
    name: 'Playwright Tests'
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-noble

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install system dependencies
        run: |
          apt-get update
          apt-get install -y make wget unzip libpq-dev postgresql-client redis-tools netcat-openbsd
          
      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: backend/.dev/venv
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-backend-
        
      - name: Install backend dependencies
        run: |
          cd backend
          test -d .dev/venv || python3.11 -m venv .dev/venv
          .dev/venv/bin/pip install --upgrade pip
          find . -name 'requirements.txt' -exec .dev/venv/bin/pip install -r {} \;
        env:
          VIRTUAL_ENV: backend/.dev/venv
          DJANGO_DB: postgresql
          POSTGRES_HOST: postgres
          POSTGRES_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432

      - name: Download and install ifcopenshell
        run: |
          wget -O /tmp/ifcopenshell_python.zip "https://s3.amazonaws.com/ifcopenshell-builds/ifcopenshell-python-311-v0.8.4-6924012-linux64.zip"
          mkdir -p .dev/venv/lib/python3.11/site-packages
          unzip -o -d .dev/venv/lib/python3.11/site-packages /tmp/ifcopenshell_python.zip
          rm /tmp/ifcopenshell_python.zip
          find .dev/venv/lib/python3.11/site-packages -name "*ifcopenshell*" || echo "No ifcopenshell files found"
        working-directory: ./backend

      # NEW: wait on services (no docker compose)
      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until pg_isready -h postgres -U postgres; do sleep 2; done'
          echo "Waiting for Redis..."
          timeout 30 bash -c 'until redis-cli -h redis ping | grep PONG; do sleep 2; done'
          echo "All services are ready!"

      - name: Prepare MEDIA_ROOT
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/.ci_media"
          chmod -R 777 "${GITHUB_WORKSPACE}/.ci_media"

      - name: Django migrate (no seeds)
        working-directory: ./backend
        env:
          DJANGO_DB: postgresql
          POSTGRES_HOST: postgres
          POSTGRES_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          MEDIA_ROOT: ${{ github.workspace }}/.ci_media
        run: |
          .dev/venv/bin/python manage.py migrate

      - name: Start Celery worker (background)
        working-directory: ./backend
        env:
          DJANGO_DB: postgresql
          POSTGRES_HOST: postgres
          POSTGRES_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          MEDIA_ROOT: ${{ github.workspace }}/.ci_media
          CELERY_BROKER_URL: redis://redis:6379/0
          CELERY_RESULT_BACKEND: django-db
        run: |
          .dev/venv/bin/python -m celery --app=core worker --loglevel=INFO --concurrency=2 --task-events --hostname=worker@%n \
            > ../.celery_worker.log 2>&1 &
          echo $! > ../.celery_worker.pid

      # NEW: start Django so Playwright can hit the API
      - name: Start Django server (background)
        working-directory: ./backend
        env:
          DJANGO_DB: postgresql
          POSTGRES_HOST: postgres
          POSTGRES_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          MEDIA_ROOT: ${{ github.workspace }}/.ci_media
          DJANGO_TRUSTED_ORIGINS: http://localhost http://localhost:3000 http://127.0.0.1 http://127.0.0.1:3000
        run: |
          .dev/venv/bin/python manage.py runserver 0.0.0.0:8000 > ../.django.log 2>&1 &
          echo $! > ../.django.pid
          # wait for :8000 to accept connections
          timeout 60 bash -c 'until nc -z localhost 8000; do sleep 1; done'

      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
        
      - name: Install frontend dependencies (required for webServer)
        run: npm install
        working-directory: ./frontend
        
      - name: Cache e2e dependencies
        uses: actions/cache@v4
        with:
          path: e2e/node_modules
          key: ${{ runner.os }}-e2e-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-e2e-
        
      - name: Install e2e dependencies (replicating make e2e-test)
        run: npm install
        working-directory: ./e2e
        
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('e2e/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
        
      - name: Install Playwright browsers
        run: npm run install-playwright
        working-directory: ./e2e
        
      - name: Run Playwright tests
        run: npm run test
        working-directory: ./e2e
        env:
          DJANGO_DB: postgresql
          POSTGRES_HOST: postgres
          POSTGRES_NAME: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          MEDIA_ROOT: ${{ github.workspace }}/.ci_media
          CELERY_BROKER_URL: redis://redis:6379/0
          CELERY_RESULT_BACKEND: django-db
          DJANGO_TRUSTED_ORIGINS: http://localhost http://localhost:3000 http://127.0.0.1 http://127.0.0.1:3000
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e/test-results/
          retention-days: 7

      - name: Stop background processes
        if: always()
        working-directory: ./backend
        run: |
          if [ -f ../.celery_worker.pid ]; then kill -TERM "$(cat ../.celery_worker.pid)" || true; fi
          if [ -f ../.django.pid ]; then kill -TERM "$(cat ../.django.pid)" || true; fi
          sleep 2 || true
          ps -ef | grep -E 'celery worker|manage.py runserver' | grep -v grep || true
