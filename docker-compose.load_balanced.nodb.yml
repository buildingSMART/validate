services:

    # Frontend - React + nginx + Certbot
    frontend:
        image: buildingsmart/validationsvc-frontend
        build:
            context: .
            dockerfile: ./docker/frontend/Dockerfile
            target: run
        restart: unless-stopped
        container_name: frontend
        ports:
            - 80:80
            - 443:443
        environment:
            CERTBOT_DOMAIN: ${CERTBOT_DOMAIN}
            CERTBOT_EMAIL: ${CERTBOT_EMAIL}
        volumes:
            - ./docker/frontend/letsencrypt:/etc/letsencrypt
            - static_data:/app/backend/django_static
        depends_on:
            - backend

    # Backend - Django (x2)
    backend:
        image: buildingsmart/validationsvc-backend
        build:
            context: .
            dockerfile: ./docker/backend/Dockerfile
            target: run
        entrypoint: /app/backend/server-entrypoint.sh
        restart: unless-stopped
        volumes:
            - static_data:/app/backend/django_static
            - files_data:/files_storage
            - gherkin_rules_log_data:/gherkin_logs
        expose:
            - 8000
        environment:
            PUBLIC_URL: ${PUBLIC_URL} # for IAM links
            ENV: ${ENV}
            DEBUG: ${DEBUG}
            CELERY_BROKER_URL: ${CELERY_BROKER_URL}
            CELERY_RESULT_BACKEND: "django-db"
            CELERY_RESULT_BACKEND_DB: "db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_NAME}"
            DJANGO_DB: ${DJANGO_DB}
            DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
            DJANGO_DB_BULK_CREATE_BATCH_SIZE: ${DJANGO_DB_BULK_CREATE_BATCH_SIZE}
            GHERKIN_LOG_FOLDER: ${GHERKIN_LOG_FOLDER}
            DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
            DJANGO_TRUSTED_ORIGINS: ${DJANGO_TRUSTED_ORIGINS}
            DJANGO_GUNICORN_WORKERS: ${DJANGO_GUNICORN_WORKERS}
            DJANGO_GUNICORN_THREADS_PER_WORKER: ${DJANGO_GUNICORN_THREADS_PER_WORKER}
            POSTGRES_HOST: ${POSTGRES_HOST}
            POSTGRES_PORT: ${POSTGRES_PORT}
            POSTGRES_NAME: ${POSTGRES_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            B2C_CLIENT_ID: ${B2C_CLIENT_ID}
            B2C_CLIENT_SECRET: ${B2C_CLIENT_SECRET}
            B2C_AUTHORITY: ${B2C_AUTHORITY}
            B2C_USER_FLOW: ${B2C_USER_FLOW}
            USE_WHITELIST: ${USE_WHITELIST}
        deploy: # example only
            mode: replicated
            replicas: 2 
            endpoint_mode: vip
        depends_on:
            - redis

    # Worker - Celery worker (x2)
    worker:
        image: buildingsmart/validationsvc-backend
        build:
            context: .
            dockerfile: ./docker/backend/Dockerfile
            target: run
        entrypoint: /app/backend/worker-entrypoint.sh
        restart: unless-stopped
        volumes:
            - files_data:/files_storage
            - gherkin_rules_log_data:/gherkin_logs
        environment:
            PUBLIC_URL: ${PUBLIC_URL} # for email links
            ENV: ${ENV}
            DEBUG: ${DEBUG}
            CELERY_BROKER_URL: ${CELERY_BROKER_URL}
            CELERY_RESULT_BACKEND: "django-db"
            CELERY_RESULT_BACKEND_DB: "db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_NAME}"
            CELERY_TASK_SOFT_TIME_LIMIT: ${CELERY_TASK_SOFT_TIME_LIMIT}
            CELERY_TASK_TIME_LIMIT: ${CELERY_TASK_TIME_LIMIT}
            TASK_TIMEOUT_LIMIT: ${TASK_TIMEOUT_LIMIT}
            CELERY_CONCURRENCY: ${CELERY_CONCURRENCY}
            DJANGO_DB: ${DJANGO_DB}
            DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
            DJANGO_DB_BULK_CREATE_BATCH_SIZE: ${DJANGO_DB_BULK_CREATE_BATCH_SIZE}
            GHERKIN_LOG_FOLDER: ${GHERKIN_LOG_FOLDER}
            POSTGRES_HOST: ${POSTGRES_HOST}
            POSTGRES_PORT: ${POSTGRES_PORT}
            POSTGRES_NAME: ${POSTGRES_NAME}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            MAILGUN_API_URL: ${MAILGUN_API_URL}
            MAILGUN_API_KEY: ${MAILGUN_API_KEY}
            MAILGUN_FROM_NAME: ${MAILGUN_FROM_NAME}
            MAILGUN_FROM_EMAIL: ${MAILGUN_FROM_EMAIL}            
            ADMIN_EMAIL: ${ADMIN_EMAIL}
            CONTACT_EMAIL: ${CONTACT_EMAIL}             
        deploy: # example only
            mode: replicated
            replicas: 2 
            endpoint_mode: vip
        depends_on:
            - redis

    # Redis
    redis:
        image: redis:7.2-alpine 
        restart: unless-stopped
        container_name: redis
        expose:
            - ${REDIS_PORT}
        volumes:
            - redis_data:/data

volumes:
    static_data:
    files_data:
    redis_data:
    gherkin_rules_log_data: